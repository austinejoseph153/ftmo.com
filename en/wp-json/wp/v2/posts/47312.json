{"id":47312,"date":"2019-03-04T13:31:49","date_gmt":"2019-03-04T12:31:49","guid":{"rendered":"https:\/\/ftmo.com\/?p=47312"},"modified":"2022-01-11T18:04:43","modified_gmt":"2022-01-11T17:04:43","slug":"mql4","status":"publish","type":"post","link":"https:\/\/ftmo.com\/en\/mql4\/","title":{"rendered":"MQL Programming: Complete Guide for 2021 &#8211; Build Powerful Trading Robot"},"content":{"rendered":"<p><em>Welcome to the MQL Programming Guide.\u00a0We are going to start with basics and slowly continue to more advanced stuff.\u00a0If you want to discover our Trading Applications you can sign up for a <a href=\"https:\/\/ftmo.com\/23071238-2\/\">Free Trial<\/a> and trade with <a href=\"https:\/\/ftmo.com\/funding-process\/\">FTMO account<\/a> up to $400,000.<\/em><\/p>\n<h2><span lang=\"EN-GB\">Automa<\/span><span lang=\"EN-GB\">ted<\/span><span lang=\"EN-GB\"> trading systems<\/span><\/h2>\n<p><span lang=\"EN-GB\">If you are interested in trading, you have surely already come across the term &#8220;automated trading system&#8221;, abbreviated as ATS. <\/span><\/p>\n<p><span lang=\"EN-GB\">Thanks to these systems, traders have much broader trading options. <\/span><\/p>\n<p><span lang=\"EN-GB\">ATS can run continuously day and night and not get tired of it. <\/span><\/p>\n<p><span lang=\"EN-GB\">Equally, it can trade dozens of markets at the same time, has no emotions and does only what it is allowed to do. <\/span><\/p>\n<p><span lang=\"EN-GB\">It never fails, does not do anything beyond its settings, and does not miss any trade. <\/span><\/p>\n<p><span lang=\"EN-GB\">These properties may not always be an advantage but since you are reading these lines you may have already decided for ATS.<\/span><\/p>\n<p><span lang=\"EN-GB\">An automated trading system is an algorithm written in a particular programming language whose task it is to enter, close and manage trading positions under prescribed conditions or, where appropriate, to perform other tasks. <\/span><\/p>\n<p><span lang=\"EN-GB\">It is nothing else than tens, hundreds or even thousands of lines of text in code that the trading platform translates into its language and on the basis of which it does what the code says.<\/span><\/p>\n<p><span lang=\"EN-GB\"> The good news is that if we have a platform for it, we can usually also create and test such systems without further installations and fees. <\/span><\/p>\n<p><span lang=\"EN-GB\">All you usually need is the knowledge of the programming language. <\/span><\/p>\n<p><span lang=\"EN-GB\">Every trading platform typically has its own, tailored language. <\/span><\/p>\n<p><span lang=\"EN-GB\">In this series, we are going to cover the most popular programming language of the trading software <strong>MetaTrader 4<\/strong>. <\/span><\/p>\n<p><span lang=\"EN-GB\">This language is called MetaQuotes Language, <strong>MQL<\/strong> for short.<\/span><\/p>\n<h3><strong><span lang=\"EN-GB\">What is the MetaQuotes Language and what is it used for?<\/span><\/strong><\/h3>\n<p><span lang=\"EN-GB\">MQL programming language was developed by the company MetaQuotes, which is also the operator of the popular trading platform MetaTrader used for trading CFD derivatives.<\/span><\/p>\n<p><span lang=\"EN-GB\"> The module for the creation and editing of automated trading systems, but also of the indicators and other programs designed to run in MetaTrader, comes directly with the platform and is called the MetaEditor. <\/span><\/p>\n<p><span lang=\"EN-GB\">Therefore, if you have downloaded and installed MetaTrader, you automatically have MetaEditor as well.<\/span><\/p>\n<p><span lang=\"EN-GB\"> The same is also true for versions 4 and 5. <\/span><\/p>\n<p><span lang=\"EN-GB\">You can run MetaEditor from the platform in the Tools menu \u2013 MetaQuotes Language Editor or directly from its icon on the top toolbar:<\/span><\/p>\n<p><a href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/ME-p\u0159\u00edstup.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-10494 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/ME-p\u0159\u00edstup.png\" alt=\"mql4\" width=\"443\" height=\"234\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/ME-p\u0159\u00edstup.png 443w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/ME-p\u0159\u00edstup-300x158.png 300w\" sizes=\"(max-width: 443px) 100vw, 443px\" \/><\/a><\/p>\n<p><span lang=\"EN-GB\">The individual components of the MetaEditor will be dealt with in the next episode.<\/span><\/p>\n<h3><span lang=\"EN-GB\">Basic terms<\/span><\/h3>\n<p><span lang=\"EN-GB\">From a programmer&#8217;s point of view, the MQL language is derived from C++. Knowledge of C++ is, therefore, an advantage, however, it is certainly no problem to learn to program in MQL without any previous programming experience. <\/span><\/p>\n<p><span lang=\"EN-GB\">Now let&#8217;s summarize some important basic concepts to be encountered down the line which is essential for its understanding.<\/span><\/p>\n<p><span lang=\"EN-GB\"><strong>Execution<\/strong> = implementation of the algorithm (program) by the MetaTrader Terminal. Performing the execution, the Terminal &#8220;reads&#8221; the code of the program and executes the actions in the MetaTrader Terminal.<\/span><\/p>\n<p><span lang=\"EN-GB\"><strong>Control<\/strong> = the part of the program that is being executed. In other words, the part of the code which is currently being read and performed by the Terminal.<\/span><\/p>\n<p><span lang=\"EN-GB\"><strong>Tick<\/strong> = new inbound price. Most of the programs are specifically executed upon each new tick.<\/span><\/p>\n<p><span lang=\"EN-GB\"><strong>Comment<\/strong> = the part of the program which is not there to be executed. In code, this is the part of the line that begins with two consecutive slashes. <\/span><\/p>\n<p><span lang=\"EN-GB\">For clarity, these parts are colored in gray in the code and they are skipped during execution. If we want to comment on multiple lines, we can mark the beginning of commentary as \/* and the end as *\/. <\/span><\/p>\n<p><span lang=\"EN-GB\">It may not seem that way but describing parts of the code is critically important to make the code clear to understand not only to anyone else but also even to the author him or herself.<\/span><\/p>\n<p><a href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/comment-EN.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-10486 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/comment-EN.png\" alt=\"mql4\" width=\"365\" height=\"51\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/comment-EN.png 365w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/comment-EN-300x42.png 300w\" sizes=\"(max-width: 365px) 100vw, 365px\" \/><\/a><\/p>\n<p><span lang=\"EN-GB\"><strong>Terminal<\/strong> = the classic user interface of the MetaTrader in which we launch programs and which is able to execute the codes written in the MQL language.<\/span><\/p>\n<p><span lang=\"EN-GB\"><strong>Compilation<\/strong> = compilation is the last phase of the creation of the program.<\/span><\/p>\n<p><span lang=\"EN-GB\">During this action, the compiler in the MetaEditor checks the code for errors and then prepares the program for operation in the Terminal.<\/span><\/p>\n<p><span lang=\"EN-GB\"> If there are errors in the code, the compiler lists them and the programmer is forced to correct them.<\/span><\/p>\n<h3><span lang=\"EN-GB\">MQL vs. Metatrader 4 and 5<\/span><\/h3>\n<p><span lang=\"EN-GB\">Now shortly something about the differences between the versions of MT4 and MT5 and their relation to the MQL.<\/span><\/p>\n<p><span lang=\"EN-GB\">MetaTrader 4 and MetaTrader 5 as such are different in many ways, however, the relevant programming languages only differ in parts.<\/span><\/p>\n<p><span lang=\"EN-GB\"> Originally, each version had both its custom MetaEditor and language (the languages were based on the same basis, the MQL5 was only further developed). <\/span><\/p>\n<p><span lang=\"EN-GB\">Thus, the mutually incompatible MQL4 and MQL5 used to exist alongside each other. <\/span><\/p>\n<p><span lang=\"EN-GB\">But the popularity of the newer MT5 at the expense of MT4 did not rise and this even held true for the respective MQL versions. <\/span><\/p>\n<p><span lang=\"EN-GB\">However, programmers wanted to program the programs that were only possible in MQL5, also into MT4. <\/span><\/p>\n<p><span lang=\"EN-GB\">The creators of the languages, therefore, gave way to a so-called &#8220;grand unification&#8221; which came along with the MetaTrader build 600. <\/span><\/p>\n<p><span lang=\"EN-GB\">MQL4 underwent major updates towards MQL5, as well as its corresponding MetaEditor, which is now exactly the same in both versions.<\/span><\/p>\n<p><span lang=\"EN-GB\"> Programs are written in MQL5, however, will only function in the <strong>MQL4<\/strong> under certain conditions, as a lot of elements of MT4 were retained for compatibility with older programs. <\/span><\/p>\n<p><span lang=\"EN-GB\">Therefore, to be safe, we need to make clear here that this series deals only with the <strong>MQL4<\/strong> language which is, however, already very close to MQL5.<\/span><\/p>\n<p><span lang=\"EN-GB\">The series will be written in rather laymen terms so that really everyone can learn the basics of <strong>MQL<\/strong>.<\/span><\/p>\n<header class=\"entry-content-header\">\n<h2 class=\"post-title entry-title\">MetaEditor<\/h2>\n<\/header>\n<div class=\"entry-content\">\n<p><strong>How do I enter the MetaEditor? What are its parts and what can they do? Can I customize the different panels and toolbars? Can I close some of the windows completely?<\/strong><\/p>\n<p>As mentioned in the first part, the MetaEditor can be accessed either using the menu Tools \u2013 MetaQuotes Language Editor, or the appropriate icon in the top toolbar of the Terminal.<\/p>\n<p>We have also mentioned that what you see then, is all the same, whether MetaEditor is opened in MetaTrader version 4 or 5.<\/p>\n<p>MetaEditor is very simple, practical and effective. It does not contain any extra functionality. The MetaEditor work environment can be divided into five parts.<\/p>\n<h3>Top Toolbar<\/h3>\n<p><a class=\"lightbox-added alignnone\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n%C3%A1stroj%C5%AF.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-10511 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n\u00e1stroj\u016f.png\" alt=\"mql4\" width=\"1350\" height=\"55\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n\u00e1stroj\u016f.png 1350w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n\u00e1stroj\u016f-300x12.png 300w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n\u00e1stroj\u016f-768x31.png 768w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n\u00e1stroj\u016f-1030x42.png 1030w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n\u00e1stroj\u016f-705x29.png 705w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Panely-n\u00e1stroj\u016f-450x18.png 450w\" sizes=\"(max-width: 1350px) 100vw, 1350px\" \/><\/a><\/p>\n<p>These toolbars contain the traditional program menu and menu related to the active program (active in the main editor).<\/p>\n<p>The full menu is hidden in the drop-down menus File, Edit, etc., while the most used tools are \u201csurfaced\u201d in the form of icons.<\/p>\n<p>On the left side, there are by default a block of tools for working with files, two icons to switch on\/off the Navigator module and the Toolbox, while other icons apply to the active program you are working with.<\/p>\n<p>The icon layout can be customized according to your preferences after right-clicking one of the icons and choosing Customize.<\/p>\n<p>What a particular icon does will appear in a tool-tip upon hovering over it or at the same time in the status bar at the bottom of MetaEditor.<\/p>\n<p>On the far right, then, there is a very important tool \u2014 the lookup field.<\/p>\n<p>Under the geared wheel icon, you can choose whether you want the specified expression to be searched only in the current document and\/or all files and\/or the entire MQL community.<\/p>\n<p>If you have checked the option to search in the MQL community, the appropriate web page will open after the search.<\/p>\n<p>The rest of the search results can be found in the Toolbox on the Search tab.<\/p>\n<p>You will undoubtedly find search useful in solving various programming tasks, especially at the onset.<\/p>\n<p>The MQL community operates in English and Russian.<\/p>\n<h3>Navigator<\/h3>\n<p><a class=\"lightbox-added alignnone\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Navigator.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-10506 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Navigator.png\" alt=\"mql4\" width=\"200\" height=\"190\" \/><\/a><\/p>\n<p>The Navigator is used for navigating through the file structure, which after the \u201cgrand unification\u201d of MQL versions moved to a slightly more complex destination.<\/p>\n<p>Generally for Windows, it is C:\\Users\\ \u201cuser\u201d \\AppData\\Roaming\\ MetaQuotes\\Terminal\\ \u201cinstance_code\u201d \\MQL4\\.<\/p>\n<p>Here you should be able to find all the source files of programs in MQL for the particular MetaTrader instance.<\/p>\n<p>These can then be viewed and edited directly in the editor. The module can be turned off and on using the relevant icon or menu on the main toolbar.<\/p>\n<h3>Program-Writing Editor<\/h3>\n<p><a class=\"lightbox-added alignnone\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Editor.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-10501 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Editor.png\" alt=\"mql4\" width=\"603\" height=\"103\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Editor.png 603w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Editor-300x51.png 300w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Editor-450x77.png 450w\" sizes=\"(max-width: 603px) 100vw, 603px\" \/><\/a><\/p>\n<p>This is, of course, the largest window.<\/p>\n<p>The Editor itself does not offer too much.<\/p>\n<p>It is, de facto, just a text editor in which you write and edit the active program.<\/p>\n<p>To the left, there is a useful lines counter.<\/p>\n<p>By clicking a particular line number, you can mark it to be easily located at a later time.<\/p>\n<p>If you have multiple open programs, then you can switch between them using the tabs at the top part of the editor.<\/p>\n<h3>Toolbox<\/h3>\n<p><a class=\"lightbox-added alignnone\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Toolbox.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-10516 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Toolbox.png\" alt=\"mql4\" width=\"342\" height=\"181\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Toolbox.png 342w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/11\/Toolbox-300x159.png 300w\" sizes=\"(max-width: 342px) 100vw, 342px\" \/><\/a><\/p>\n<p>The\u00a0<strong>Toolbox<\/strong>\u00a0offers several useful tools, among which you can switch in the lower part.<\/p>\n<p>The tab\u00a0<strong>Errors<\/strong>\u00a0is used for the overview and description of the errors in the program during its compilation.<\/p>\n<p>Bug reports will be dealt with in one of the later parts of the series.<\/p>\n<p><strong>Search<\/strong>\u00a0displays the results of the search in the document or in files.<\/p>\n<p><strong>Articles<\/strong>\u00a0display the latest articles on the website of MQL community.<\/p>\n<p>Upon double click, the relevant article will open on the site mql5.com<\/p>\n<p>In the\u00a0<strong>Code Base<\/strong>\u00a0tab, there is a list of new programs available from members of the MQL community have shared to their pages.<\/p>\n<p>Once again, by clicking any of the items, the browser with the appropriate page will open.<\/p>\n<p>The\u00a0<strong>Journal<\/strong>\u00a0section is used as the program log.<\/p>\n<h3>Status Bar<\/h3>\n<p>The status bar only occupies a single line at the very bottom of the MetaEditoru, but it provides very valuable information.<\/p>\n<p>In its left part, it displays what an icon or menu item does upon hover over the icon or menu item.<\/p>\n<p>In its right part, then, you can see what parts of the program your cursor is currently located in, i.e. in which row and column.<\/p>\n<p>Still, the far right also shows the abbreviation of the type of writing. INS for classic paste, OVR for overwriting.<\/p>\n<p>You can switch between these modes use the Insert key like in common text editors.<\/p>\n<p>Since we already know everything about the MetaEditor, we can start creating our first program.<\/p>\n<p>We will describe the program file wizard and the basic types of programs.<\/p>\n<header class=\"entry-content-header\">\n<h2 class=\"post-title entry-title\">New MQL Program and Types of Programs in MQL4<\/h2>\n<\/header>\n<div class=\"entry-content\">\n<p>How do I start creating my program in the MetaEditor? What are the types of programs and their specific features? Which program should I choose?<\/p>\n<p>In the last part, we described the individual elements of the MetaEditor, which is why we are ready to embark on the creation of the first program. We begin the creation of a new program by clicking on the icon to<img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-12387 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/12\/New.png\" alt=\"mql4\" width=\"61\" height=\"29\" \/> the left in the toolbar, or clicking the same button in the File drop-down menu.<\/p>\n<p>First, we have to select the type of program that we want to create.<\/p>\n<p>The default pre-chosen option is Expert Advisor, other options include Custom Indicator or Script.<\/p>\n<p>According to the selected type, MetaEditor prepares for us the code of the program, but this is not a non-reversible choice, we can then change the code as we like, even with the program type.<\/p>\n<p>We can leave the last three types out as we will not need them in this series.<\/p>\n<p>These are additional codes for more complex programs.<\/p>\n<p>Now, when we are to choose the type of program, it is time to explain basic differences between strategy, indicator, and script.<\/p>\n<p>After that, we will finish the creation of the program.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-12393 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/12\/Wizard.png\" alt=\"mql4\" width=\"522\" height=\"387\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2017\/12\/Wizard.png 522w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/12\/Wizard-300x222.png 300w, https:\/\/ftmo.com\/wp-content\/uploads\/2017\/12\/Wizard-450x334.png 450w\" sizes=\"(max-width: 522px) 100vw, 522px\" \/><\/p>\n<h3>Script<\/h3>\n<p>The script is the simplest type of program that is used for one-time execution of a task.<\/p>\n<p>When initiated, it only executes once and turns off.<\/p>\n<p>The entire code to be executed as part of the special function OnStart(), other functions have no purpose in the script.<\/p>\n<p>Do not panic, we will talk about special functions in other episodes.<\/p>\n<p>Examples of the script may be programs that perform a one-time rendition of a graphical element into a chart, programs that open or closed positions with specific characteristics, and so on.<\/p>\n<p>Therefore, the script itself cannot contain trading functions that can open or close or modify positions.<\/p>\n<p>Most importantly, however, the entire code is only executed once.<\/p>\n<p>As soon as the code is executed to the end, the program ends.<\/p>\n<h3>Automated Trading System (Expert Advisor)<\/h3>\n<p>A program of this type is primarily used for creating automated trading systems, but it can also be used to create other supporting programs that are executed repeatedly, for example, information ones.<\/p>\n<p>Unlike in the case of a script, the code is executed on a regular basis, usually upon every incoming tick, i.e. upon each new incoming price (with the only exception of ticks which came at a time when the previous execution of the program had not finished).<\/p>\n<p>The main part of the program is usually a part of the special function OnTick(), and there are usually also the functions OnInit() and OnDeinit() which contain the piece of code that is executed when starting or switch-off a strategy.<\/p>\n<p>It is possible to add even more special functions to the program which we will be talking about in further installments.<\/p>\n<p>However, you might not need these, especially if you are only just starting with MQL.<\/p>\n<p>A strategy may of course also include trading functions.<\/p>\n<p>When switched on, the strategy runs until it is turned off.<\/p>\n<h3>Custom Indicator<\/h3>\n<p>A program of the indicator type is used for creating custom graphical indicators.<\/p>\n<p>The main special function of this type is the function OnCalculate() which is also executed upon each incoming price.<\/p>\n<p>Here, too, the functions OnInit() and OnDeinit() are commonly used, along with some of the other special functions. Unlike the strategy, this type cannot contain trading functions.<\/p>\n<p>Although they may be there, they will be ignored.<\/p>\n<p>Once we know which type of program we want to create, we can move to the next options.<\/p>\n<p>In the next window, we will need to name the program.<\/p>\n<p>This is the only mandatory field.<\/p>\n<p>We can also add authorship and link to a web page.<\/p>\n<p>The already known parameters (variables) that will be active in the program can be added to the largest field.<\/p>\n<p>Even here, it holds true that all (non-)specified values apart from the name can then be edited, deleted or added in the code without any problem.<\/p>\n<p>If we chose the script at the beginning, the wizard to a new program will be finished at this stage.<\/p>\n<p>If our plan is to create another program, the wizard will require us to give more information about the special functions.<\/p>\n<p>If you are only starting with MQL, these offers do not need to distract you and you can click through them as they are with peace of mind.<\/p>\n<p>They will first come in handy for the more complex programs.<\/p>\n<p>If you are creating an indicator, at the end of the wizard, you can specify the planned lines of the indicator with their style, color and name.<\/p>\n<p>You can also define whether they will be in a separate window or directly in the chart, and, where appropriate, if they will have a minimum and a maximum.<\/p>\n<p>Once again, this is not anything that could not be changed directly in the code.<\/p>\n<p>After you complete the wizard, the pre-designed code pops up in the code editor.<\/p>\n<p>Its syntax is based on what you entered in the wizard.<\/p>\n<p>In order for you to start getting to know certain parts of the code which are identical to all programs and start organizing your program code, we are going to focus on program structure in the fourth episode.<\/p>\n<header class=\"entry-content-header\">\n<h2 class=\"post-title entry-title\">MQL4 Structure of the Programme<\/h2>\n<\/header>\n<div class=\"entry-content\">\n<p>What are the parts of the program? Do these parts vary according to program type? Why is it important to divide codes into logical parts? How does the program control move among program parts?<\/p>\n<p>Each program can be divided into several logical parts.<\/p>\n<p>Their number and use depend on the type and purpose of the program.<\/p>\n<p>The following diagram offers a basic schematic of the parts contained in most programs.<\/p>\n<p>Below the diagram, there is an explanation of the progress of program execution as performed by the computer.<\/p>\n<p>Then, individual main parts of the program are discussed.<\/p>\n<p>It may seem to be an excessive theory but you will learn for yourself that the knowledge of what is being executed is very important.<\/p>\n<div id=\"attachment_14130\" class=\"wp-caption aligncenter\">\n<p><a class=\"lightbox-added\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/structure-of-the-program.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-14130 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/structure-of-the-program-e1520094520227.png\" alt=\"mql4\" width=\"319\" height=\"245\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/structure-of-the-program-e1520094520227.png 319w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/structure-of-the-program-e1520094520227-300x230.png 300w\" sizes=\"(max-width: 319px) 100vw, 319px\" \/><\/a><\/p>\n<p class=\"wp-caption-text\">Structure of the program. Source: https:\/\/book.mql4.com\/programm\/structure<\/p>\n<\/div>\n<h3>The progress of program execution<\/h3>\n<p>The usual progress of program execution among individual parts is marked in the diagram by a yellow line.<\/p>\n<p>As evident from the last episode already, the program first reads the header and then executes the function OnInit() if it is present.<\/p>\n<p>Then, it moves to the main special function which differs according to the type of program, as we have seen in the last episode.<\/p>\n<p>&nbsp;<\/p>\n<p>If the program is a script, the special function OnStart() is executed only once.<\/p>\n<p>In other cases, the main special function is executed over and over again until an instruction is given to exit the program.<\/p>\n<p>This may come either from any part of the code or from the program user.<\/p>\n<p>Once that happens, the function OnDeinit() is in turn for the execution, if present, and then the program ends.<\/p>\n<p>Smaller yellow lines indicate the possibility to summon the execution of custom functions from the main functions.<\/p>\n<p>We will deal with user functions closer at a later time.<\/p>\n<p>They are parts of the code which are to execute a specific task.<\/p>\n<p>In the code, they are located outside of the other functions, usually below the whole code.<\/p>\n<p>As seen here, these functions can be initiated to execution from all of the special functions, not only from the main function but also from other custom functions as well.<\/p>\n<p>The number of custom functions in the program is not restricted.<\/p>\n<p>Blue arrows indicate the communications of individual functions with the terminal.<\/p>\n<p>This can be done for instance to get the current instrument price, volumes and other information.<\/p>\n<p>In some cases, the program may even ensure communication outside the terminal, indicated by black arrows.<\/p>\n<p>This involves, for example, the execution of orders where the program communicates with the broker\u2019s server or the work with files where information is exchanged directly with the operating system.<\/p>\n<h3>Header<\/h3>\n<p>The header usually provides basic information about the program first, such as the version, authorship, description, etc.<\/p>\n<p>This is the information displayed upon program startup in Metatrader.<\/p>\n<p>In order for them to be displayed to the user, the code has to always start with the modifier #property and the name of the specific information type (e.g. copyright, description, version, etc.).<\/p>\n<p>Furthermore, we define the global variables in the header.<\/p>\n<p>These variables will be available to all functions in the program.<\/p>\n<p>Of course, we will talk about variables closer in further episodes of this series.<\/p>\n<p>If the name of the variable is preceded by the modifier \u201cinput\u201d, we define a variable whose value can be entered by the program user him or herself (in the case of a script, it is necessary to enter the modifier #property show_inputs to display the window with parameters).<\/p>\n<p>In the header, it is also, for instance, possible to import functions from other file libraries and other activities.\u00a0<a class=\"lightbox-added wp-image-14136 size-full\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/header.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/header.png\" alt=\"mql4\" width=\"598\" height=\"211\" \/><\/a><\/p>\n<div id=\"attachment_14136\" class=\"wp-caption alignnone\">\n<p>&nbsp;<\/p>\n<\/div>\n<h3>Special function OnInit()<\/h3>\n<p>This function contains the code to be executed as first. It is, therefore, a sum of actions to be performed before starting the main part of the program.<\/p>\n<p>It may involve the preparation of graphics, the definition of indicator lines, preparation of calculations etc. With an indicator the function is almost always present, otherwise, it is not necessarily needed and we can leave it blank or delete it completely. In that case, the control switches from the header straight to the main special function.<\/p>\n<p>Although MetaEditor always generates it in the first place, it is in practice completely arbitrary wherein the program it is located.<\/p>\n<p>The control always heads to it first, if it is present in the code.<\/p>\n<h3><a class=\"lightbox-added aligncenter\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnInit-EN.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-14437 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnInit-EN.png\" alt=\"mql4\" width=\"599\" height=\"419\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnInit-EN.png 599w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnInit-EN-300x210.png 300w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnInit-EN-450x315.png 450w\" sizes=\"(max-width: 599px) 100vw, 599px\" \/><\/a><\/h3>\n<h3>Main special function<\/h3>\n<p>Each program must include a special function that will contain the main part of the program for execution.<\/p>\n<p>That is the part that defines the main mission of our program.<\/p>\n<p>Specific main special functions vary according to the program type.<\/p>\n<p>In the case of a script, it has the name OnStart(), in case of a strategy it is OnTick(), and finally, in case of an indicator, it is OnCalculate().<\/p>\n<p>Several further special functions can be added to the programs.<\/p>\n<p>There will be a special article dealing with them after the completion of the basics series as they will not be needed for the basics.<\/p>\n<p>The name of the special function suggests what kind of events it will be performed.<\/p>\n<p>The OnInit() is executed upon initialization, OnTick() upon receiving a new incoming tick, etc.<\/p>\n<p>This part of the program usually contains the largest part of the code and the execution of this part also employs the control the longest.<\/p>\n<p>In the case of a strategy or an indicator, this section repeats over and over again, until the program is ended.<\/p>\n<h3>User-defined functions<\/h3>\n<p>Most of the more complex codes will contain user-defined functions for the sake of clear arrangement.<\/p>\n<p>These are all the non-predefined functions which the programmer defines him or herself in the code.<\/p>\n<p>They will be dealt with in detail later. Also, it does not matter where in the code they will be placed.<\/p>\n<p>Normally, they are placed at the very end for the sake of clarity.<\/p>\n<p>They are executed at the moment when they are initiated from other parts of the code that is currently being executed.<\/p>\n<p>The principle of initiation and construction of custom functions will be shown in further episodes, however, it certainly will do no harm to have a look at what they can look like now.<\/p>\n<h3><a class=\"lightbox-added aligncenter\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/pythagoras-EN.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-14447 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/pythagoras-EN-e1520408878372.png\" alt=\"mql4\" width=\"340\" height=\"243\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/pythagoras-EN-e1520408878372.png 340w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/pythagoras-EN-e1520408878372-300x214.png 300w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/pythagoras-EN-e1520408878372-260x185.png 260w\" sizes=\"(max-width: 340px) 100vw, 340px\" \/><\/a><\/h3>\n<h3>Special functions OnDeinit()<\/h3>\n<p>As the name of this special function suggests, it is responsible for the execution of the code upon deinitialization, i.e. end of the program.<\/p>\n<p>Thus, it is a set of actions that are performed once the user or the terminal give the command to end the program. It may involve for example deleting graphics features of the program, parting with the user, etc.<\/p>\n<p>Once again, the position in the code does not matter.<\/p>\n<p>Once the execution of the function is finished, the program ends. If the function is missing, the program will end directly upon the signal to exit, like in the case of OnInit().<\/p>\n<p><a class=\"lightbox-added aligncenter\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnDeinit-EN.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-14453 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnDeinit-EN.png\" alt=\"mql4\" width=\"599\" height=\"128\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnDeinit-EN.png 599w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnDeinit-EN-300x64.png 300w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/01\/OnDeinit-EN-450x96.png 450w\" sizes=\"(max-width: 599px) 100vw, 599px\" \/><\/a><\/p>\n<p>In further episodes, we will finally have a look at the specific characteristics of the MQL language. We will start with the division of data into individual types.<\/p>\n<header class=\"entry-content-header\">\n<h2 class=\"post-title entry-title\">MQL4 Data Types<\/h2>\n<\/header>\n<div class=\"entry-content\">\n<p><span lang=\"EN-GB\">Why is it important to distinguish data according to their type? What data types are there and what are they good for? How does a computer work with data?<\/span><\/p>\n<p><span lang=\"EN-GB\">Every program has to process certain data.<\/span><\/p>\n<p><span lang=\"EN-GB\"> However, not all data are mutually intelligible.<\/span><\/p>\n<p><span lang=\"EN-GB\"> We will be using numbers, texts, often times also colors or enumerations, and performing various operations with such data \u2013 arithmetic, such as addition, multiplication, etc., assigning (assigning values to variables), comparing, and other<\/span><span lang=\"EN-GB\">.<\/span><\/p>\n<p><span lang=\"EN-GB\"> However, we may only perform these operations with data of the same type.<\/span><\/p>\n<p><span lang=\"EN-GB\"> In other words, we must not mix apples and oranges.<\/span><\/p>\n<p><span lang=\"EN-GB\"> A text cannot be added to a number and a color can in no way be compared to a date. <\/span><\/p>\n<p><span lang=\"EN-GB\">Therefore, it is necessary to strictly differentiate what type of data we are working with.<\/span><\/p>\n<p><span lang=\"EN-GB\">To communicate to the computer what type of data for a specific variable or function we are working with, we use so-called datatype identifiers in the code. <\/span><\/p>\n<p><span lang=\"EN-GB\">We insert these identifiers in front of a variable or function when declaring it. <\/span><\/p>\n<p><span lang=\"EN-GB\">The introduction or declaration of variables and functions can be found in further episodes.<\/span><\/p>\n<p><span lang=\"EN-GB\">The data in the code can be divided into the types listed in the following table. <\/span><\/p>\n<p><span lang=\"EN-GB\">Listed here are only the basic types sufficient for the creation of common programs. <\/span><\/p>\n<p><span lang=\"EN-GB\">There also are derived types which, however, mostly have the sole function of saving your computer\u2019s memory, or conversely, enabling you to insert extreme values. Information about these is available in English at http:\/\/docs.mql4.com\/basis\/types.<\/span><\/p>\n<table width=\"361\">\n<tbody>\n<tr>\n<td width=\"100\"><strong>Identifier<\/strong><\/td>\n<td width=\"155\"><strong>Data Type<\/strong><\/td>\n<\/tr>\n<tr>\n<td width=\"100\">int<\/td>\n<td width=\"155\">integer<\/td>\n<\/tr>\n<tr>\n<td width=\"100\">bool<\/td>\n<td width=\"155\">logical<\/td>\n<\/tr>\n<tr>\n<td width=\"100\">string<\/td>\n<td width=\"155\">string<\/td>\n<\/tr>\n<tr>\n<td width=\"100\">double<\/td>\n<td width=\"155\">floating-point number<\/td>\n<\/tr>\n<tr>\n<td width=\"100\">color<\/td>\n<td width=\"155\">color<\/td>\n<\/tr>\n<tr>\n<td width=\"100\">DateTime<\/td>\n<td width=\"155\">date and time<\/td>\n<\/tr>\n<tr>\n<td width=\"100\">enum<\/td>\n<td width=\"155\">enumeration<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p><span lang=\"EN-GB\">It is also interesting that of all of them, the program only uses three types, i.e. integers, decimals, and strings. The difference from other types is only in the size of memory the computer allocates to each value, and in the form, the data are presented to the user. You can get to the bottom of this reading the following lines.<\/span><\/p>\n<h3>Integers (int)<\/h3>\n<p><span lang=\"EN-GB\">This type of data is useful for variables and functions which by their nature can only be integers. It may be the number of positions, the number of chart candles, the difference between the prices in pips, and the like. The value of the variables of this type is limited to the number 2 147 483 647 in both the positive and negative spectrum. If we need a higher number, we need to use a derived data type, such as int or long. An example of the introduction of an integer variable and assignment of a specific value is shown in the following line.<\/span><\/p>\n<p>int Number = 5;<\/p>\n<h3>Logical value (bool)<\/h3>\n<p><span lang=\"EN-GB\">Logical value, or Bool value, is a data type represented by one of the values TRUE or FALSE. In the code, it can be written as true and false or as 1 and 0. This means that the computer understands this type as an integer.<\/span><\/p>\n<p>bool Error = true;<\/p>\n<p>bool Error = 1;<\/p>\n<h3>String (string)<\/h3>\n<p><span lang=\"EN-GB\">We use the string data type for data in which we want to insert text or a string of any characters. The beginning and end of the string have to be always enclosed in quotation marks.<\/span><\/p>\n<p>string Adv = \u201eGet up to 40 000 USD for trading CFDs\u201c;<\/p>\n<h3><span lang=\"EN-GB\">Decimal number (double)<\/span><\/h3>\n<p><span lang=\"EN-GB\">We use a decimal number where the value is not inherently an integer but\u00a0<span id=\"result_box\" lang=\"en\">can also have decimal places (up to 15).<\/span><\/span><\/p>\n<p>double Decimal = 15.958645;<\/p>\n<p>double Average_profit = Profit\/Trading_days;<\/p>\n<h3>Colour (color)<\/h3>\n<p><span lang=\"EN-GB\">If we determine a variable or function as the data type color, the value we input in it will be understood by the computer as a specific color code according to its internal color palette. We have three options for informing it which color we want. The easiest option is to write it in words. However, the color name must be one of the web colors the MQL is able to distinguish. A table with the names can be found at http:\/\/docs.mql4.com\/constants\/objectconstants\/webcolors.<\/span><\/p>\n<p>color Colour = Red;<\/p>\n<p><span lang=\"EN-GB\">Another option is an integer number notation. On the Internet, it is usually used in the form of the so-called hexadecimal code. The color hexadecimal code can be retrieved from any simple text or graphics editor. The code is based on RGB values, therefore, on the ratio of red, green and blue color in the formula 0xRRGGBB.<\/span><\/p>\n<p>color White = 0xFFFFFF;<\/p>\n<p><span lang=\"EN-GB\">We may also use the same value converted to decimal degrees.<\/span><\/p>\n<p>color Green = 32768;<\/p>\n<p><span lang=\"EN-GB\">There are more options to enter the color code, however, they may be considered as less practical. This is why we will only point you to the appropriate web page for more information: http:\/\/book.mql4.com\/basics\/types#13.<\/span><\/p>\n<h3>Date and time (DateTime)<\/h3>\n<p><span lang=\"EN-GB\">This data type is, of course, used to write dates and, if need be, time as well. A specific data entry will always start with the identifier D\u00b4 followed by the date and time code. The formats rrrr.mm.dd and dd.mm.rrrr which we are used to from our latitudes is also accepted. Seconds, minutes and hours are facultative. However, if the day, month or year are missing, the compiler will notify us of error.<\/span><\/p>\n<p>DateTime NewYear1 = D\u20192017.31.12 23:59:59\u2032;<\/p>\n<p>DateTime NewYear2 = D\u201931.12.2017\u2032;<\/p>\n<p><span lang=\"EN-GB\">Even in this case, the date is converted to an integer number, for the purposes of the processing unit computations as the number of seconds that have passed since 01. 01. 1970 00:00:00. The date and time 29.08. 2015 15:44 may, therefore, be also written this way:<\/span><\/p>\n<p>DateTime Now = 1440863081;<\/p>\n<p><span lang=\"EN-GB\">You will most likely never enter the number in this format, but it may happen that where you expect the date, a fantastical number like this one pops up due to some kind of error. The cause will then be known to you.<\/span><\/p>\n<p><span lang=\"EN-GB\">In practice, a date is seldom explicitly entered into variables. Typically, variables which bear time in them are in some way derived for example from the current time, for which we have the functions TimeCurrent() and TimeLocal() functions. Here, too, the above-mentioned conversion to an integer code will come handy, as, for example, current time + two days will simply be calculated as follows:<\/span><\/p>\n<p>DateTime TheDayAfterTomorrow = TimeLocal() + 2*24*60*60;<\/p>\n<p><span lang=\"EN-GB\">In other words, the day after tomorrow = now + 2(days)*24(hours)*60(minutes)*60(seconds). Now you already know why this is this way, which will make your work with data considerably easier.<\/span><\/p>\n<h3>Enumeration (enum)<\/h3>\n<p><span lang=\"EN-GB\">Enumeration is one of the data types which only came into existence in MQL4 after the \u201cgrand unification\u201d. This data type is used to create groups of data of the same type. We may assign values to the data, but we do not have to, as they will be assigned automatically. Enumeration must be declared inside curly brackets. In this basic series, we more than likely will not need enumerations. We will be able to read about them in articles beyond the scope of this series.<\/span><\/p>\n<p><span lang=\"EN-GB\">Already in this episode, we have come across the important concept of a \u201cvariable\u201d. It is precisely variables that will be discussed in the next episode.<\/span><\/p>\n<header class=\"entry-content-header\">\n<h2 class=\"post-title entry-title\">Variables<\/h2>\n<\/header>\n<div class=\"entry-content\">\n<p><strong><span lang=\"EN-GB\">What is a variable and what does it do in the program? How do I create a variable? How do I assign it a value? Into what types of variables can they be divided?<\/span><\/strong><\/p>\n<p><span lang=\"EN-GB\">Work with variables is absolutely unavoidable in any program. A variable acts as the holder of a certain value we assign to it. The value of the variable is stored in computer memory until changed again by another operation. <\/span><\/p>\n<p><span lang=\"EN-GB\">Using variables, the program can store and present information in various forms. However, you will also be using auxiliary variables which will only operate within the code so their use will not be apparent to the user from outside. You might not feel much informed by these definitions but you will find them clear soon enough from practical examples. <\/span><\/p>\n<p><span lang=\"EN-GB\">Variables can be divided based on various criteria but first, we will learn how to \u201cproduce\u201d such a variable that the computer understands it and assigns a value to it.<\/span><\/p>\n<h3>Declaration<\/h3>\n<p><span lang=\"EN-GB\">The introduction of variables into the program is called declaration. It is very easy. To introduce a variable one has to only know the name and data type we wish to input. <\/span><\/p>\n<p><span lang=\"EN-GB\">We explained data types in the\u00a0<a href=\"https:\/\/ftmo.com\/data-types\/\">previous episode<\/a>. The introduction will be performed by writing the data type identifier and then the name of the variable. The name can only contain English characters. Special characters, including the dot, for example, may not be used. <\/span><\/p>\n<p><span lang=\"EN-GB\">A declaration is an operation, it is necessary to write a semicolon at the end of it. We will learn why in the next episode dealing with operations. <\/span><\/p>\n<p><span lang=\"EN-GB\">The introduction of the variable named \u201cChallenge\u201d which should contain integer values, will, therefore, appear in the code as follows:<\/span><\/p>\n<p>int Challenge;<\/p>\n<p><span lang=\"EN-GB\">There can even be more variables of the same type at the same time, their names only have to be separated by a comma:<\/span><\/p>\n<p>double Profit, Loss, Win_Rate, RiskRewardRatio;<\/p>\n<p><span lang=\"EN-GB\">This way, we have declared six variables to which we are planning to input decimal numbers. If any of the variables were of a different type, we need to declare them separately. The first value assigned to a variable is called initialization.<\/span><\/p>\n<h3 class=\"post-title entry-title\">MQL4 Initialization<\/h3>\n<p><span lang=\"EN-GB\">Initialization, i.e. the first assignment of a value to a variable, is simply performed by an assigning operation where we use the symbol =. The options are numerous. Initialization can be performed by direct assignation:<\/span><\/p>\n<p>Deposit = 100 000;<\/p>\n<p><span lang=\"EN-GB\">Or as the result of an equation in which other variables occur:<\/span><\/p>\n<p>A = B + C<\/p>\n<p><span lang=\"EN-GB\">Or perhaps as the result of a function or a combination of functions:<\/span><\/p>\n<p>Today =\u00a0TimeToString(TimeCurrent(),TIME_DATE);<\/p>\n<p><span lang=\"EN-GB\">This way, we have for example inserted the current date of the broker\u2019s server converted to text into the variable Today. However, the variable Today must be declared as a string type. Once again, do not forget the semicolon at the end.<\/span><\/p>\n<p><span lang=\"EN-GB\">Declaration and initialization can be combined into a single operation on a single line, like this:<\/span><\/p>\n<p>int A = 3;<\/p>\n<p>color Yell = Yellow, Lemon = Lime;<\/p>\n<p><span lang=\"EN-GB\">On the previous two lines, we have introduced an integer variable of the value 3 and the color Yell with the value Yellow and Lemon with the value Lime.<\/span><\/p>\n<h3><span lang=\"EN-GB\">Custom vs predefined variables<\/span><\/h3>\n<p><span lang=\"EN-GB\">Above, we have seen the creation and work with custom variables. In the MQL framework, however, there is also a number of predefined variables we do not need to declare or initialize. If we use them in the code, they turn pink and automatically contain the appropriate value.<\/span><\/p>\n<p><span lang=\"EN-GB\"> These variables contain specific data about the market, the chart on which the program is running, and other characteristics of the Terminal. <\/span><\/p>\n<p><span lang=\"EN-GB\">Below, you will find a table with these variables and the values they contain. You will probably never use some of them while others are used in almost every program.<\/span><\/p>\n<table width=\"583\">\n<tbody>\n<tr>\n<td width=\"99\"><strong>Variable<\/strong><\/td>\n<td width=\"484\"><strong>Value<\/strong><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_digits\">_Digits<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The number of decimal places in the price of the market on which the program is running.<\/span><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_point\">_Point<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The point size of the market on which the program is running<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_lasterror\">_LastError<\/a><\/td>\n<td width=\"484\">C<span lang=\"EN-GB\">ode of the last error.<\/span><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_period\">_Period<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The timeframe of the chart on which the program is running.<\/span><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_randomseed\">_RandomSeed<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">Status of the generator of pseudorandom numbers.<\/span><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_stopflag\">_StopFlag<\/a><\/td>\n<td width=\"484\">Program stop flag.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_symbol\">_Symbol<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The name of the symbol on which the program is running<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/_uninitreason\">_UninitReason<\/a><\/td>\n<td width=\"484\">The reason for deinitialization.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/ask\">Ask<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The last known Ask price of the market on which the program is running<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/bars\">Bars<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The number of bars on the chart on which the program is running.<\/span><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/bid\">Bid<\/a><\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The last known Bid price of the market on which the program is running<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/close\">Close<\/a>[]<\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The array type variable containing closing prices of all of the chart candles<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/digitsvar\">Digits<\/a><\/td>\n<td width=\"484\">See _Digits.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/high\">High<\/a>[]<\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The array type variable containing the highest prices of all of the chart candles.<\/span><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/low\">Low<\/a>[]<\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The array type variable containing the lowest prices of all of the chart candles<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/open\">Open<\/a>[]<\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The array type variable containing opening prices of all of the chart candles<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/pointvar\">Point<\/a><\/td>\n<td width=\"484\">See _Point.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/time\">Time<\/a>[]<\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The array type variable containing opening times of all of the chart candles<\/span>.<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><a href=\"http:\/\/docs.mql4.com\/predefined\/volume\">Volume<\/a>[]<\/td>\n<td width=\"484\"><span lang=\"EN-GB\">The array type variable containing all chart candle volumes<\/span>.<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p><span lang=\"EN-GB\">By clicking on the variable name, you will open its detailed description at mql.com.<\/span><\/p>\n<p><span lang=\"EN-GB\">Maybe you paused at the array type variables and looked for them in this episode. However, they deserve their own chapter so we will go through them in the next episode. Now, just briefly on the division of variables to global and local.<\/span><\/p>\n<h3><span lang=\"EN-GB\">Global vs. local variables<\/span><\/h3>\n<p><span lang=\"EN-GB\">Whether a variable is global or local depends on the part of the program in which it is declared. If the variable is declared in the code header outside the body of all functions (we talked about program structure in the\u00a0<a href=\"https:\/\/ftmo.com\/structure-of-the-programme\/\">fourth episode<\/a>), it is a global variable. <\/span><\/p>\n<p><span lang=\"EN-GB\">Such a variable is available to all of the functions of the program \u2013 both main and custom ones. In other words, it can be used with the same name and current value in all parts of the program. <\/span><\/p>\n<p><span lang=\"EN-GB\">However, this type of the global variable must not be confused with global variables which are available even for the entire terminal and all its other programs.<\/span><\/p>\n<p><span lang=\"EN-GB\"> Those are operated using a set of functions. This special type of variables will be discussed in a separate article.<\/span><\/p>\n<p><span lang=\"EN-GB\">Conversely, any local variable is a variable defined inside one of the functions. This is then available only for that function alone. If it is used in another function, it will not be detected, or the compiler will mark it as an error and force you to repair it.<\/span><\/p>\n<p><span lang=\"EN-GB\"> This other function can also have a variable declared with the same name but its value will depend only on the operations within this function. <\/span><\/p>\n<p><span lang=\"EN-GB\">If you need to convert the value of a variable from one function to another, it can be done using the parameters of the function call. However, we will only talk about those in the episode of functions.<\/span><\/p>\n<p><span lang=\"EN-GB\">As mentioned above, the next episode will expand on the issue of variables by the arrays which are used with the very important predefined variables, such as Open, High, Low, Close, Time and Volume.<\/span><\/p>\n<header class=\"entry-content-header\">\n<h2 class=\"post-title entry-title\">MQL4 Array variables<\/h2>\n<\/header>\n<div class=\"entry-content\">\n<p><strong><span lang=\"EN-GB\">What is an array variable? How to index its value? How are its declaration and initialization different from the normal variables? How do you find a specific value from a set of values? Why such variables exist and how will they make my work easier?<\/span><\/strong><\/p>\n<p><span lang=\"EN-GB\">As we said last time, we need to allocate a part of the series to a piece on array variables, especially on the predefined ones which fortunately are their simplest instances. <\/span><\/p>\n<p><span lang=\"EN-GB\">This is because these variables are used to initiate the characteristic values of candlesticks in the graph which are necessary for the formation of most trading systems and indicators.<\/span><\/p>\n<h3>Arrays in general<\/h3>\n<p><span lang=\"EN-GB\">A normal variable can only bear a single value at a time. In contrast, an array variable carries the whole indexed set of values which can be up to four-dimensional. Thanks to the indexes, we can then initiate a specific value from the set we currently need. <\/span><\/p>\n<p><span lang=\"EN-GB\">At a given time, it is only possible to have access to one of the values in the set. The more dimensions the set has, the more coordinates the index has. It is the same as when we are looking for a point on a two-dimensional plane, e.g. a map. <\/span><\/p>\n<p><span lang=\"EN-GB\">We, too, need to enter the longitude and latitude. But when we are looking for a point in a three-dimensional space, we already need to have three coordinates. <\/span><\/p>\n<p><span lang=\"EN-GB\">Unlike the geographical coordinates, it could also be needed for example to know the floor of the building. This is nicely illustrated in an image from the website mql.com:<\/span><\/p>\n<div id=\"attachment_18321\" class=\"wp-caption aligncenter\">\n<p><a class=\"lightbox-added size-full wp-image-18321\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Dimenze.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Dimenze.png\" alt=\"mql4\" width=\"570\" height=\"254\" \/><\/a><\/p>\n<p class=\"wp-caption-text\">Figure a) illustrates a one-dimensional set of values of an array variable, figure b) a two-dimensional one and figure c) a three-dimensional one. Fortunately, it will suffice for the purposes of this series to work with one-dimensional sets.<\/p>\n<\/div>\n<h3>Declaration and initialization<\/h3>\n<p><span lang=\"EN-GB\">The declaration of an array variable compared to the normal declaration only differs in one thing. Apart from the data type and name of the variable, the number of values in the set have to be stated as well in square brackets. Initialization also only runs slightly differently. If we want to insert the set of values manually, we can do so by listing them in the brackets.<\/span><\/p>\n<p>int Serie[4] = {9,8,7,6};<\/p>\n<p><span lang=\"EN-GB\">This way, we have declared the one-dimensional variable Serie of the integral type which contains the values 1, 2, 3 and 4. Indexing is performed from left to right starting with zero. The specific value is later initiated in the program by the series name and the index in square brackets.<\/span><\/p>\n<p>Result = Serie[1];<\/p>\n<p><span lang=\"EN-GB\">After you perform this assignment, the variable Result acquires the value 8, since the index 1 value of the variable Serie is 8 (the first value, that is 9, has index 0).<\/span><\/p>\n<p><span lang=\"EN-GB\">However, the manual declaration is not very practical mainly due to the enormous sets of values and it is not used much. <\/span><\/p>\n<p><span lang=\"EN-GB\">A handier method of initializing an array variable presents itself in loops. These will be first dealt with in the upcoming piece on operators but for illustration, let us see what such initialization might look like.<\/span><\/p>\n<p><span lang=\"EN-GB\">for (x = 0; x &lt; Bars; x++)<\/span><\/p>\n<p><span lang=\"EN-GB\">{Serie[x] = (High[x]+Low[x])\/2}<\/span><\/p>\n<p><span lang=\"EN-GB\">In this case, the for loop will serve us an example which functions so that the first expression (x = 0) in the header (in the parentheses) is executed, then an iteration of the loop (the code in composite parentheses) is executed, then, the third expression in parentheses (x ++, which is x +1) is executed, then the next iteration of the loop and the loop continues this way over and over again, until the condition in the second expression in parentheses (x &lt; Bars) is met.<\/span><\/p>\n<p><span lang=\"EN-GB\"> We have talked about the variable Bars already \u2013 it is the number of candlesticks on the chart.<\/span><\/p>\n<p><span lang=\"EN-GB\"> As we can see, each iteration is done with x higher by one value and the last iteration is done for x = Bars \u2013 1, as the next step no longer meets the condition of the second expression. <\/span><\/p>\n<p><span lang=\"EN-GB\">With each loop iteration, the variable Serie with the index x is assigned the value resulting from the equation (High[x] + Low[x])\/2, which is nothing more than the average of the High and Low of the candlestick with the index x. <\/span><\/p>\n<p><span lang=\"EN-GB\">The result will be a single-dimensional array variable \u201cSerie\u201d which will contain a set of averages of highs and lows of all the candlesticks on the chart. <\/span><\/p>\n<p><span lang=\"EN-GB\">This brings us neatly to the very important issue of so-called time series and their indexing.<\/span><\/p>\n<h3>Predefined arrays<\/h3>\n<p><span lang=\"EN-GB\">As we said in the past, the MQL language includes several predefined variables that do not need to be declared or initialized. Some of them are of the array type and this part of the series was created about them predominately. Just to make sure, I will repeat which variables these are in the following table.<\/span><\/p>\n<table width=\"583\">\n<tbody>\n<tr>\n<td width=\"99\"><strong>Variable<\/strong><\/td>\n<td width=\"484\"><strong>Values<\/strong><\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><strong><a href=\"http:\/\/docs.mql4.com\/predefined\/time\">Time<\/a><\/strong><\/td>\n<td width=\"484\">Series array that contains an open time of each bar of the current chart<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><strong><a href=\"http:\/\/docs.mql4.com\/predefined\/open\">Open<\/a><\/strong><\/td>\n<td width=\"484\">Series array that contains open prices of each bar of the current chart<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><strong><a href=\"http:\/\/docs.mql4.com\/predefined\/high\">High<\/a><\/strong><\/td>\n<td width=\"484\">Series array that contains the highest prices of each bar of the current chart<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><strong><a href=\"http:\/\/docs.mql4.com\/predefined\/low\">Low<\/a><\/strong><\/td>\n<td width=\"484\">Series array that contains the lowest prices of each bar of the current chart<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><strong><a href=\"http:\/\/docs.mql4.com\/predefined\/close\">Close<\/a><\/strong><\/td>\n<td width=\"484\">Series array that contains close prices for each bar of the current chart<\/td>\n<\/tr>\n<tr>\n<td width=\"99\"><strong><a href=\"http:\/\/docs.mql4.com\/predefined\/volume\">Volume<\/a><\/strong><\/td>\n<td width=\"484\">Series array that contains tick volumes of each bar of the current chart<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p><span lang=\"EN-GB\">The list is quite possibly familiar to you. This is because when you hover over a specific candlestick in Metatrader, a tooltip will show displaying exactly these details. At the same time, you can see the same details on the status bar to the right.<\/span><\/p>\n<p><span lang=\"EN-GB\">Thanks to these variables, we can easily retrieve the value of any of these specific features of any candlestick in the graph the program is running in. We already know how to initiate a value, now we just need to know based on what key the values of candlesticks are indexed.<\/span><\/p>\n<p><span lang=\"EN-GB\">Indexation of the candlesticks takes place from zero in ascending order from the right. This means that the current bar which is just being created has the index of 0. The last finished bar has an index of 1, etc. Everything is illustrated in the following figure and table:<\/span><\/p>\n<p><a class=\"lightbox-added aligncenter\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-18331 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace.png\" alt=\"mql4\" width=\"426\" height=\"267\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace.png 426w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace-300x188.png 300w\" sizes=\"(max-width: 426px) 100vw, 426px\" \/><\/a><\/p>\n<p><a class=\"lightbox-added aligncenter\" href=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace-tabulka.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-18337 size-full\" src=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace-tabulka.png\" alt=\"mql4\" width=\"654\" height=\"102\" srcset=\"https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace-tabulka.png 654w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace-tabulka-300x47.png 300w, https:\/\/ftmo.com\/wp-content\/uploads\/2018\/05\/Indexace-tabulka-450x70.png 450w\" sizes=\"(max-width: 654px) 100vw, 654px\" \/><\/a><\/p>\n<p><span lang=\"EN-GB\">The image shows a minute chart where numbers above candlesticks correspond to their indices. In the table, there are concrete features of the candlesticks with their respective indexes. It follows from the table that if we want to obtain, for example, the opening price of the current candlestick, we need the value Open[0] which is currently 1.54370.<\/span><\/p>\n<p><span lang=\"EN-GB\"> The volume of the candlestick with index 19 \u2013 Volume[19] has the current value of 82, and so on. If we return to the example above with the variable Serie and apply it to this particular situation, then after executing this expression,<\/span><\/p>\n<p><span lang=\"EN-GB\">the value of (1,54352 + 1,54324)\/2 = 1,54338 will be saved in the Serie variable with index 2.<\/span><\/p>\n<p><span lang=\"EN-GB\">We will encounter this type of variable times and times over in this series, so it does not matter if you have not understood the issue completely \u2013 everything is clearer in practice. In the next part, we will be dealing with a quite relaxing issue, namely operations.<\/span><\/p>\n<\/div>\n<header class=\"entry-content-header\">\n<h2 class=\"post-title entry-title\">Operations<\/h2>\n<\/header>\n<div class=\"entry-content\">\n<p><strong><span lang=\"EN-GB\">What is the operation? What types of operations are there? What operations can we use in the code? How come the operation X = X + 2 is ok?<\/span><\/strong><\/p>\n<p><span lang=\"EN-GB\">To most of you, this article should be rather relaxing. We need to clarify what operations we can use in the MQL code and how. We will also talk about some of the details that are not completely intuitive if you are new to programming.<\/span><\/p>\n<p><span lang=\"EN-GB\"> The creators of the MQL language divide operations into seven categories; we will now go through the four major ones. <\/span><\/p>\n<p><span lang=\"EN-GB\">These are the operations you will mostly know from primary and secondary school. However, it is necessary to clarify some of its properties.<\/span><\/p>\n<h3>Arithmetical<\/h3>\n<p><span lang=\"EN-GB\">The first category of operations is all well known. When performing calculations, we can use the arithmetic symbols as we know them from school, i.e., + for addition, \u2013 for subtraction, * for multiplication and \/ for a division. There are only three features we do not know from school.<\/span><\/p>\n<p><span lang=\"EN-GB\">The symbol % as a symbol of operation retrieves the remainder after division, and also frequently used are the ++ and \u2013 \u2013 symbols which reduce or increase a variable by 1. A little table for the sake of clarity:<\/span><\/p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\n<tbody>\n<tr>\n<th>SYMBOL<\/th>\n<th>OPERATION<\/th>\n<th>EXAMPLE<\/th>\n<th>ANALOG<\/th>\n<\/tr>\n<tr>\n<td>%<\/td>\n<td>Residue of division<\/td>\n<td>minutes = time % 60<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>++<\/td>\n<td>Addition of 1 to the value of the variable<\/td>\n<td>y++<\/td>\n<td>y = y + 1<\/td>\n<\/tr>\n<tr>\n<td>\u2014<\/td>\n<td>Subtraction of 1 from the value of the variable<\/td>\n<td>y\u2013<\/td>\n<td>y = y \u2013 1<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h3>Assignment<\/h3>\n<p><span lang=\"EN-GB\">We change the value of a variable using an assigning operation, i.e. using the symbol =. Now I need to point out a counter-intuitive feature of programming some beginners sometimes cannot accept. <\/span><\/p>\n<p><span lang=\"EN-GB\">The expression A = B + C in code is not identified as an equation. If that had been the case, the expression X = X + 2 would have been pointless. However, that is not the case. Since the symbol = indicates an assignment operation rather than a symbol of equality, the program\u2019s statement as \u201cthe variable X is to be assigned the expression X + 2\u201d. <\/span><\/p>\n<p><span lang=\"EN-GB\">Therefore, if X equals 2 before the execution of this operation, it will be 4 afterward. If the operation is carried out again, then the new X will be 6. And so on. <\/span><\/p>\n<p><span lang=\"EN-GB\">This rule applies in the following table of assignment operations.<\/span><\/p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\n<tbody>\n<tr>\n<th>SYMBOL<\/th>\n<th>OPERATION<\/th>\n<th>EXAMPLE<\/th>\n<th>ANALOG<\/th>\n<\/tr>\n<tr>\n<td>=<\/td>\n<td>Assignment of the value x to the variable y<\/td>\n<td>\u0443 = x<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>+=<\/td>\n<td>An increase of the variable y by x<\/td>\n<td>\u0443 += x<\/td>\n<td>y = y + x<\/td>\n<\/tr>\n<tr>\n<td>-=<\/td>\n<td>Reduction of the variable y by x<\/td>\n<td>y -= x<\/td>\n<td>y = y \u2013 x<\/td>\n<\/tr>\n<tr>\n<td>*=<\/td>\n<td>Multiplication of the variable y by x<\/td>\n<td>y *= x<\/td>\n<td>y = y * x<\/td>\n<\/tr>\n<tr>\n<td>\/=<\/td>\n<td>Division of the variable y by x<\/td>\n<td>y \/= x<\/td>\n<td>y = y \/ x<\/td>\n<\/tr>\n<tr>\n<td>%=<\/td>\n<td>The residue of the division of the variable y by x<\/td>\n<td>y %= x<\/td>\n<td>y = y % x<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h3>Relational<\/h3>\n<p><span lang=\"EN-GB\">Relational operations are used to compare the values of two or more variables. They find use especially in the headers of composite operators which we will be dealing with in the next piece. We know most of the symbols from school again, other symbols come purely from the programming realm. <\/span><\/p>\n<p><span lang=\"EN-GB\">In the table, you can see that the symbol for equality is == instead of the expected = which symbolizes the assignment operation.<\/span><\/p>\n<p><span lang=\"EN-GB\"> Make sure not to confuse these two symbols, as this is a very common mistake which is, nevertheless, not always easy to reveal.<\/span><\/p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\n<tbody>\n<tr>\n<th>SYMBOL<\/th>\n<th>OPERATION<\/th>\n<th>EXAMPLE<\/th>\n<\/tr>\n<tr>\n<td>==<\/td>\n<td>True, if x is equal to y<\/td>\n<td>x == y<\/td>\n<\/tr>\n<tr>\n<td>!=<\/td>\n<td>True, if x is not equal to y<\/td>\n<td>x != y<\/td>\n<\/tr>\n<tr>\n<td>&lt;<\/td>\n<td>True, if x is less than y<\/td>\n<td>x &lt; y<\/td>\n<\/tr>\n<tr>\n<td>&gt;<\/td>\n<td>True, if x is more than y<\/td>\n<td>x &gt; y<\/td>\n<\/tr>\n<tr>\n<td>&lt;=<\/td>\n<td>True, if x is equal to or less than y<\/td>\n<td>x &lt;= y<\/td>\n<\/tr>\n<tr>\n<td>&gt;=<\/td>\n<td>True, if x is equal to or more than y<\/td>\n<td>x &gt;= y<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h3>Boolean<\/h3>\n<p><span lang=\"EN-GB\">You have probably heard about logical or boolean operations at the secondary school. Once again, they will be used mainly for composite operators. These are the following three:<\/span><\/p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\n<tbody>\n<tr>\n<th>SYMBOL<\/th>\n<th>OPERATION<\/th>\n<th>EXAMPLE<\/th>\n<th>EXPLANATIONS<\/th>\n<\/tr>\n<tr>\n<td>!<\/td>\n<td>NOT (logical negation)<\/td>\n<td>\u0445!=0<\/td>\n<td>True, if x does not equal 0<\/td>\n<\/tr>\n<tr>\n<td>||<\/td>\n<td>OR (logical disjunction)<\/td>\n<td>x &lt; 5 || x &gt; 7<\/td>\n<td>True if x equals 5 OR 7<\/td>\n<\/tr>\n<tr>\n<td>&amp;&amp;<\/td>\n<td>AND (logical conjunction)<\/td>\n<td>x == 3 &amp;&amp; y &lt; 5<\/td>\n<td>True, if x equals 3 AND y is less than 5<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p><span lang=\"EN-GB\">Enumeration of basic operations is finished for us. We should add that a function initiation is also an operation, but we will discuss that when we are through with functions. In the next part, we will open the core issue of operators.<\/span><\/p>\n<\/div>\n<h2>Conclusion<\/h2>\n<div>We hope that you have found this article helpful and you are already looking forward to build your trading robot.<\/div>\n<div><\/div>\n<div>We plan for regular updates in the future, so don&#8217;t forget to keep an eye on our blog.<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div style=\"clear: both;\"><\/div>\n","protected":false},"excerpt":{"rendered":"<p>Welcome to the MQL Programming Guide.\u00a0We are going to start with basics and slowly continue to more advanced stuff.\u00a0If you want to discover our Trading Applications you can sign up for a Free Trial and trade with FTMO account up to $400,000. Automated trading systems If you are interested in trading, you have surely already [&hellip;]<\/p>\n","protected":false},"author":44,"featured_media":406421,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_acf_changed":false,"inline_featured_image":false,"footnotes":""},"categories":[162],"tags":[],"acf":[],"_links":{"self":[{"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/posts\/47312"}],"collection":[{"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/users\/44"}],"replies":[{"embeddable":true,"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/comments?post=47312"}],"version-history":[{"count":11,"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/posts\/47312\/revisions"}],"predecessor-version":[{"id":605421,"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/posts\/47312\/revisions\/605421"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/media\/406421"}],"wp:attachment":[{"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/media?parent=47312"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/categories?post=47312"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/ftmo.com\/en\/wp-json\/wp\/v2\/tags?post=47312"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}